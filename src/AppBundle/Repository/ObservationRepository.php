<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Km10;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends EntityRepository
{
    public function getObservationsInfosWithBirdInfo($birdId)
    {
        $list = $this->createQueryBuilder('o')
            ->where('o.bird = :birdId')
            ->setParameter('birdId', $birdId)
//            ->andWhere('o.validated = true')
            ->leftJoin('o.bird', 'bird')
            ->addSelect('bird')
            ->getQuery()
            ->getResult();
    }

    public function getMailleGeoJsonByBird($birdId)
    {
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping($em);

        $rsm->addScalarResult('nom_maille', 'nomMaille');
        $rsm->addScalarResult('geojson', 'geometry');

        //Requete sans le validated true
        $query = $this->_em->createNativeQuery("SELECT k.nom_maille, st_asgeojson(k.polygon) as geojson FROM observation o,
 km10 k WHERE o.bird_id = :birdId AND o.km10maille_id = k.id", $rsm)
            ->setParameter('birdId',$birdId);


        //Requete avec le validated true
//        $query = $this->_em->createNativeQuery("SELECT k.nom_maille, st_asgeojson(k.polygon) as geojson FROM observation o,
// km10 k WHERE o.bird_id = :birdId AND o.km10maille_id = k.id AND o.validated = true", $rsm)
//              ->setParameter('birdId',$birdId);




        $results = $query->getResult();


        //mettre dans un service
        //Transfo en gÃ©oJson
        $feature = [];
        foreach ($results as $row) {
            $temp = array(
                'type' => 'Feature',
                'properties' => array(
                    'name' => $row['nomMaille']
                ),
                'geometry' => json_decode($row['geometry'])
            );
            array_push($feature, $temp);
        }
        $geojson = array(
            'type' => 'FeatureCollection',
            'features' => $feature
        );

        return $geojson;
    }

    public function getNbBirdsByMailleForChoicedBird($birdId)
    {

    }

    public function getOneMailleGeoJsonByBird($birdId)
    {

    }
}
